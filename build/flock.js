// Generated by CoffeeScript 1.8.0
var Boid, Flock, Rule, alignment, cohesion, flooredDivision, init, separation, wind,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

window.requestAnimFrame = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };
})();

Boid = (function() {
  function Boid(x, y, z, vx, vy, vz) {
    if (vx == null) {
      vx = 0;
    }
    if (vy == null) {
      vy = 0;
    }
    this.position = new Vector(x, y, z);
    this.velocity = new Vector(vx, vy, vz);
  }

  Boid.prototype.getNeighbors = function(boids, radiusSq) {
    return boids.filter((function(_this) {
      return function(b) {
        return _this.position.distSq(b.position) < radiusSq && b !== _this;
      };
    })(this));
  };

  return Boid;

})();

flooredDivision = function(a, n) {
  return a - n * Math.floor(a / n);
};

Rule = (function() {
  function Rule(weight, fn) {
    this.weight = weight;
    this.corrector = fn;
  }

  return Rule;

})();

Flock = (function() {
  var radiusSq;

  radiusSq = null;

  function Flock(ctx) {
    this.ctx = ctx;
    this.render = __bind(this.render, this);
    this.boids = [];
    this.rules = [];
    this.options = {};
  }

  Flock.prototype.setStage = function(opts) {
    var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
    this.options.width = (_ref = opts.width) != null ? _ref : 500;
    this.options.height = (_ref1 = opts.height) != null ? _ref1 : 500;
    this.options.depth = (_ref2 = opts.depth) != null ? _ref2 : 500;
    this.options.cameraPlane = (_ref3 = opts.cameraPlane) != null ? _ref3 : 100;
    this.options.focalLength = (_ref4 = opts.focalLength) != null ? _ref4 : 100;
    this.options.backgroundColor = (_ref5 = opts.backgroundColor) != null ? _ref5 : "rgb(0, 0, 0)";
    this.options.boidColor = (_ref6 = opts.boidColor) != null ? _ref6 : "rgb(180, 180, 180)";
    this.options.speedLimit = ((_ref7 = opts.speedLimit) != null ? _ref7 : 9) / 3;
    this.options.radius = (_ref8 = opts.radius) != null ? _ref8 : 50;
    radiusSq = this.options.radius * this.options.radius;
    this.ctx.canvas.width = this.options.width;
    this.ctx.canvas.height = this.options.height;
    return this;
  };

  Flock.prototype.applyRule = function(rule) {
    if (rule instanceof Rule) {
      this.rules.push(rule);
    }
    return this;
  };

  Flock.prototype.updatePositions = function() {
    var b, factor, h, lowerMargin, neighbors, upperMargin, w, _i, _len, _ref, _ref1, _results;
    w = this.ctx.canvas.width;
    h = this.ctx.canvas.height;
    _ref = this.boids;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      b = _ref[_i];
      neighbors = b.getNeighbors(this.boids, radiusSq);
      b.velocity = this.rules.reduce((function(_this) {
        return function(velocity, rule) {
          return velocity.addSelf(rule.corrector(b, neighbors).scaleSelf(rule.weight));
        };
      })(this), b.velocity);
      if (b.velocity.magnitudeSq() > this.options.speedLimit * this.options.speedLimit) {
        b.velocity.normalizeSelf().scaleSelf(this.options.speedLimit);
      }
      lowerMargin = (_ref1 = this.options.boundary) != null ? _ref1 : 0.2;
      upperMargin = 1 - lowerMargin;
      factor = 0.05;
      if (b.position.x < this.options.width * lowerMargin) {
        b.velocity.x += factor;
      } else if (b.position.x > this.options.width * upperMargin) {
        b.velocity.x -= factor;
      }
      if (b.position.y < this.options.height * lowerMargin) {
        b.velocity.y += factor;
      } else if (b.position.y > this.options.height * upperMargin) {
        b.velocity.y -= factor;
      }
      if (b.position.z < this.options.depth * lowerMargin) {
        b.velocity.z += factor;
      } else if (b.position.z > this.options.depth * upperMargin) {
        b.velocity.z -= factor;
      }
      _results.push(b.position.addSelf(b.velocity));
    }
    return _results;
  };

  Flock.prototype.render = function() {
    var b, dir, fade, foreshortening, scale, x, y, z, _i, _len, _ref;
    this.ctx.fillStyle = this.options.backgroundColor;
    this.ctx.fillRect(0, 0, this.options.width, this.options.height);
    this.ctx.fillStyle = this.options.boidColor;
    this.updatePositions();
    _ref = this.boids;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      b = _ref[_i];
      x = b.position.x;
      y = b.position.y;
      z = b.position.z;
      dir = b.velocity.phi() - Math.PI / 2;
      foreshortening = 1 - Math.abs(2 * b.velocity.theta() / Math.PI - 1);
      scale = 5 * this.options.focalLength / (z + this.options.cameraPlane);
      fade = 1 - 0.5 * z / this.options.depth;
      this.ctx.save();
      this.ctx.globalAlpha = fade;
      this.ctx.translate(x, y);
      this.ctx.rotate(dir);
      this.ctx.scale(scale, scale);
      this.ctx.scale(1, foreshortening);
      this.ctx.beginPath();
      this.ctx.moveTo(0, 4);
      this.ctx.lineTo(2, -2);
      this.ctx.lineTo(0, 0);
      this.ctx.lineTo(-2, -2);
      this.ctx.closePath();
      this.ctx.fill();
      this.ctx.restore();
    }
    return window.requestAnimFrame(this.render);
  };

  Flock.prototype.addBoid = function(x, y, z, vx, vy, vz) {
    if (vx == null) {
      vx = 0;
    }
    if (vy == null) {
      vy = 0;
    }
    if (vz == null) {
      vz = 0;
    }
    if (x == null) {
      x = this.options.width * Math.random();
    }
    if (y == null) {
      y = this.options.height * Math.random();
    }
    if (z == null) {
      z = this.options.depth * Math.random();
    }
    this.boids.push(new Boid(x, y, z, vx, vy, vz));
    return this;
  };

  Flock.prototype.initialize = function(n) {
    while (this.boids.length < n) {
      this.addBoid();
    }
    this.render();
    return this;
  };

  return Flock;

})();

cohesion = new Rule(0.0005, function(boid, neighbors) {
  var correction, n, _i, _len;
  correction = new Vector();
  if (neighbors.length <= 0) {
    return correction;
  }
  for (_i = 0, _len = neighbors.length; _i < _len; _i++) {
    n = neighbors[_i];
    correction.addSelf(n.position);
  }
  correction.scaleSelf(1 / neighbors.length);
  correction.subtractSelf(boid.position);
  return correction;
});

separation = new Rule(0.01, function(boid, neighbors) {
  var correction, n, _i, _len;
  correction = new Vector();
  if (neighbors.length <= 0) {
    return correction;
  }
  for (_i = 0, _len = neighbors.length; _i < _len; _i++) {
    n = neighbors[_i];
    if (boid.position.distSq(n.position) < 100) {
      correction.subtractSelf(n.position.subtract(boid.position));
    }
  }
  return correction;
});

alignment = new Rule(0.05, function(boid, neighbors) {
  var correction, n, _i, _len;
  correction = new Vector();
  if (neighbors.length <= 0) {
    return correction;
  }
  for (_i = 0, _len = neighbors.length; _i < _len; _i++) {
    n = neighbors[_i];
    correction.addSelf(n.velocity);
  }
  correction.scaleSelf(1 / neighbors.length);
  return correction.subtractSelf(boid.velocity);
});

wind = function(speed, heading) {
  return new Rule(1, function(boid, neighbors) {
    return new Vector().setPolar(speed / 100, 0, heading);
  });
};

init = function() {
  var canvas, ctx, sky, x0, y0;
  canvas = document.createElement("CANVAS");
  canvas.innerText = "You must use an HTML5 compatible browser to view this lab.";
  document.body.appendChild(canvas);
  ctx = canvas.getContext("2d");
  canvas.style.display = "block";
  canvas.style.margin = "0 auto";
  document.body.style.margin = 0;
  document.body.style.backgroundColor = "#222222";
  x0 = 0;
  y0 = 0;
  canvas.addEventListener("mousedown", function(e) {
    x0 = e.clientX - canvas.offsetLeft;
    return y0 = e.clientY - canvas.offsetTop;
  });
  canvas.addEventListener("mouseup", function(e) {
    var vx, vy, vz, x, y;
    x = e.clientX - canvas.offsetLeft;
    y = e.clientY - canvas.offsetTop;
    vx = (x - x0) / 50;
    vy = (y - y0) / 50;
    vz = 0;
    return flock.addBoid(x0, y0, null, vx, vy, vz);
  });
  window.flock = new Flock(ctx, 0);
  sky = ctx.createLinearGradient(0, 0, 0, 500);
  sky.addColorStop(0, "#0072ff");
  sky.addColorStop(1, "#00c6ff");
  flock.setStage({
    width: 500,
    height: 500,
    depth: 500,
    cameraPlane: 100,
    focalLength: 200,
    backgroundColor: sky,
    boidColor: "rgb(0,0,0)"
  });
  flock.applyRule(cohesion);
  flock.applyRule(separation);
  flock.applyRule(alignment);
  flock.applyRule(wind(0, Math.PI / 2));
  flock.initialize(10);
  return window.addEventListener("resize", flock.setStage, false);
};

window.addEventListener("load", init, false);


//# sourceMappingURL=flock.js.map
