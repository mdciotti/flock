// Generated by CoffeeScript 1.8.0
var Vector;

Vector = (function() {
  function Vector(x, y, z) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
    this.z = z != null ? z : 0;
  }

  Vector.prototype.set = function(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  };

  Vector.prototype.transform = function(fn, args) {
    return new Vector(fn.apply(null, [this.x].concat(args)), fn.apply(null, [this.y].concat(args)), fn.apply(null, [this.z].concat(args)));
  };

  Vector.prototype.transformSelf = function(fn, args) {
    this.x = fn.apply(null, [this.x].concat(args));
    this.y = fn.apply(null, [this.y].concat(args));
    this.z = fn.apply(null, [this.z].concat(args));
    return this;
  };

  Vector.prototype.setPolar = function(r, phi, theta) {
    this.x = r * Math.sin(theta) * Math.cos(phi);
    this.y = r * Math.sin(theta) * Math.sin(phi);
    this.z = r * Math.cos(theta);
    return this;
  };

  Vector.prototype.add = function(v) {
    return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);
  };

  Vector.prototype.subtract = function(v) {
    return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);
  };

  Vector.prototype.scale = function(s) {
    return new Vector(this.x * s, this.y * s, this.z * s);
  };

  Vector.prototype.magnitude = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  };

  Vector.prototype.magnitudeSq = function() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  };

  Vector.prototype.midpoint = function(v) {
    return this.add(v).scale(0.5);
  };

  Vector.prototype.normalize = function() {
    var iMag;
    iMag = 1 / this.magnitude();
    return new Vector(this.x * iMag, this.y * iMag, this.z * iMag);
  };

  Vector.prototype.dot = function(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  };

  Vector.prototype.cross = function(v) {
    return new Vector(this.y * v.z - this.z * v.y, this.x * v.z - this.z * v.x, this.x * v.y - this.y * v.x);
  };

  Vector.prototype.radius = Vector.magnitude;

  Vector.prototype.phi = function() {
    return Math.atan2(this.y, this.x);
  };

  Vector.prototype.theta = function() {
    var mag;
    mag = this.magnitude();
    if (mag === 0) {
      return 0;
    } else {
      return Math.acos(this.z / mag);
    }
  };

  Vector.prototype.copy = function(v) {
    return new Vector(v.x, v.y, v.z);
  };

  Vector.prototype.dist = function(v) {
    var dx, dy, dz;
    dx = v.x - this.x;
    dy = v.y - this.y;
    dz = v.z - this.z;
    return Math.sqrt(dx * dx + dy * dy + dz * dz);
  };

  Vector.prototype.distSq = function(v) {
    var dx, dy, dz;
    dx = v.x - this.x;
    dy = v.y - this.y;
    dz = v.z - this.z;
    return dx * dx + dy * dy + dz * dz;
  };

  Vector.prototype.addSelf = function(v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
  };

  Vector.prototype.subtractSelf = function(v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
  };

  Vector.prototype.scaleSelf = function(k) {
    this.x *= k;
    this.y *= k;
    this.z *= k;
    return this;
  };

  Vector.prototype.zero = function() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    return this;
  };

  Vector.prototype.normalizeSelf = function() {
    var iMag;
    iMag = 1 / this.magnitude();
    this.x *= iMag;
    this.y *= iMag;
    this.z *= iMag;
    return this;
  };

  Vector.prototype.distToXAxis = function() {
    return Math.sqrt(z * z + y * y);
  };

  Vector.prototype.distSqToXAxis = function() {
    return z * z + y * y;
  };

  Vector.prototype.distToYAxis = function() {
    return Math.sqrt(x * x + z * z);
  };

  Vector.prototype.distSqToYAxis = function() {
    return x * x + z * z;
  };

  Vector.prototype.distToZAxis = function() {
    return Math.sqrt(x * x + y * y);
  };

  Vector.prototype.distSqToZAxis = function() {
    return x * x + y * y;
  };

  return Vector;

})();


//# sourceMappingURL=vec3.js.map
